{"version":3,"file":"index.js","sources":["../../src/index.ts"],"sourcesContent":["/**\n * Find indexOf CR, LF, or CRLF\n *\n * @param string The search string\n * @param offset The offset for searching\n * @param includeLength Include the length in the return value\n * @returns When includeLength is true, returns a pair of [offset, length] to provide the length of CR (1), LF (1) or CRLF (2)\n */\nexport default function indexOfNewline(string: string, offset = 0, includeLength = false): number | number[] {\n  if (offset < 0) throw new Error(\"Unexpected negative offset\");\n  if (offset > string.length)\n    throw new Error(`Offset is longer than the string. Offset: ${offset}. String: ${string.length}`);\n\n  while (offset < string.length) {\n    const value = string[offset];\n    if (value === \"\\n\") return includeLength ? [offset, 1] : offset;\n    else if (value === \"\\r\") {\n      return includeLength ? [offset, string[offset + 1] === \"\\n\" ? 2 : 1] : offset;\n    }\n    offset++;\n  }\n  return includeLength ? [-1, 0] : -1;\n}\n"],"names":["indexOfNewline","string","offset","includeLength","Error","length","value"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,SAASA,cAAT,CAAwBC,MAAxB,EAAwCC,MAAM,GAAG,CAAjD,EAAoDC,aAAa,GAAG,KAApE,EAA8F;AAC3G,MAAID,MAAM,GAAG,CAAb,EAAgB,MAAM,IAAIE,KAAJ,CAAU,4BAAV,CAAN;AAChB,MAAIF,MAAM,GAAGD,MAAM,CAACI,MAApB,EACE,MAAM,IAAID,KAAJ,CAAW,6CAA4CF,MAAO,aAAYD,MAAM,CAACI,MAAO,EAAxF,CAAN;;AAEF,SAAOH,MAAM,GAAGD,MAAM,CAACI,MAAvB,EAA+B;AAC7B,UAAMC,KAAK,GAAGL,MAAM,CAACC,MAAD,CAApB;AACA,QAAII,KAAK,KAAK,IAAd,EAAoB,OAAOH,aAAa,GAAG,CAACD,MAAD,EAAS,CAAT,CAAH,GAAiBA,MAArC,CAApB,KACK,IAAII,KAAK,KAAK,IAAd,EAAoB;AACvB,aAAOH,aAAa,GAAG,CAACD,MAAD,EAASD,MAAM,CAACC,MAAM,GAAG,CAAV,CAAN,KAAuB,IAAvB,GAA8B,CAA9B,GAAkC,CAA3C,CAAH,GAAmDA,MAAvE;AACD;AACDA,IAAAA,MAAM;AACP;;AACD,SAAOC,aAAa,GAAG,CAAC,CAAC,CAAF,EAAK,CAAL,CAAH,GAAa,CAAC,CAAlC;AACD;;;;"}